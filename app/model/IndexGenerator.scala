package model

import play.api.templates.Html
import play.api._
import play.templates.ScalaTemplateCompiler
import com.codeminders.scalaws.s3.AWSS3
import com.codeminders.scalaws.s3.api.Keys
import com.codeminders.scalaws.s3.model.S3ObjectSummary
import com.codeminders.scalaws.utils.DateUtils
import Template._
import FilesListFormat._
import org.apache.commons.io.FilenameUtils
import scala.util.matching.Regex

class IndexGenerator(serviceLink: String) {

  val footer = Html("""Generated by <a href="%s">S3Index</a>""".format(serviceLink))

  def generate(s3client: AWSS3, properties: Properties, prefix: String = "", marker: String = ""): Html = {
	val filter = keysFilter(properties.includedPaths.foldLeft(List[Regex]())((l, p) => Utils.globe2Regexp(p) :: l),
      properties.excludedPaths.foldLeft(List[Regex]())((l, p) => Utils.globe2Regexp(p) :: l))(_) 
    val list = s3client(properties.bucketName).list(prefix = prefix, delimiter = "/", marker = marker, maxKeys=properties.maxKeys + 1)
    val filteredList = list.filter(e => filter(e)).take(properties.maxKeys)
    val keys = filteredList.filter(e => e.isLeft).map(e => e.left.get)
    val prefexes = filteredList.filter(e => e.isRight).map(e => e.right.get.prefix)
    val next = if(list.lengthCompare(properties.maxKeys + 1) >= 0){
      filteredList.take(properties.maxKeys + 1).last match {
        case Right(r) => r.prefix
        case Left(l) => l.key
      }
    } else ""
    html(properties.bucketName, prefix, keys, prefexes, properties.template, properties.filesListFormat, next, marker)
  }

  def html(bucketName: String, prefix: String, keys: Seq[S3ObjectSummary], prefexes: Seq[String], template: Template, filesFormat: FilesListFormat, next: String, current: String): Html = {
    def url(k: String): String = "http://%s.s3.amazonaws.com/%s".format(bucketName, k)

    val parentPrefix = if (prefix.endsWith("/")) FilenameUtils.getPath(prefix.dropRight(1)) else FilenameUtils.getPath(prefix)

    val headers = Seq(headerLine(filesFormat))

    val parentLink = if(!prefix.isEmpty() && current.isEmpty()){
      Seq(Seq(Html("""<div class="back"><a href="#" onclick="S3Index.back()">..</a></div>""")))
    } else Seq.empty

    val directories = for (g <- prefexes) yield {
      Seq(Html("""<div class="dir"><a href="#" onclick="S3Index.dir('%s')">%s</a></div>""".format(g, g.substring(prefix.length()))))
    }

    val files = for (o <- keys) yield {
      fileLine(filesFormat, prefix, o, url)
    }

    val data = headers ++ parentLink ++ files ++ directories

    val prevHtml = if(!current.isEmpty){
      Some(Html("""<a href="#" onclick="S3Index.prev()">Previous</a>"""))
    } else None

    val nextHtml = if(!next.isEmpty()){
        Some(Html("""<a href="#" onclick="S3Index.next('%s')">Next</a>""".format(next)))
    } else None

    template match {
      case Simple =>
        views.html.templates.simple(if (prefix.isEmpty()) "/" else "/" + prefix, data, prevHtml, nextHtml, footer, globals.settings.backreferenceUrl)
      case Slim =>
        views.html.templates.slim(if (prefix.isEmpty()) "/" else "/" + prefix, data, prevHtml, nextHtml, footer, globals.settings.backreferenceUrl)
    }
  }
  
  def keysFilter(includedKeys: Seq[Regex], excludedKeys: Seq[Regex])(e: Either[com.codeminders.scalaws.s3.model.S3ObjectSummary,com.codeminders.scalaws.s3.api.Keys]): Boolean = {
    val name = e match {
      case Left(obj) => obj.key
      case Right(p) => p.prefix
    }
    if (!includedKeys.isEmpty) {
      includedKeys.exists(i => i.pattern.matcher(name).matches())
    } else true && !excludedKeys.exists(e => e.pattern.matcher(name).matches())
  }

  private def headerLine(f: FilesListFormat): Seq[Html] = {
    f match {
      case Standard => Seq(Html("Name"), Html("Last Modified"), Html("Size"))
      case Brief => Seq(Html("Name"), Html("Size"))
      case Full => Seq(Html("Name"),
        Html("Last Modified"),
        Html("MD5"),
        Html("Size"),
        Html("Storage Class"),
        Html("Owner"))
    }
  }

  private def fileLine(f: FilesListFormat, p: String, o: S3ObjectSummary, url: (String) => String): Seq[Html] = {
    f match {
      case Standard => Seq(Html("""<div class="file"><a href="%s">%s</a></div>""".format(url(o.key), o.key.substring(p.length()))),
        Html(DateUtils.formatRfc822Date(o.lastModified)),
        Html(o.size.toString))
      case Brief => Seq(Html("""<div class="file"><a href="%s">%s</a></div>""".format(url(o.key), o.key.substring(p.length()))), Html(o.size.toString))
      case Full => Seq(Html("""<div class="file"><a href="%s">%s</a></div>""".format(url(o.key), o.key.substring(p.length()))),
        Html(DateUtils.formatRfc822Date(o.lastModified)),
        Html(o.etag),
        Html(o.size.toString),
        Html(o.storageClass.toString()),
        Html(o.owner.displayName))
    }
  }

}